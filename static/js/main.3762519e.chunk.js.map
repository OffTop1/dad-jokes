{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","j","console","log","handleVote","bind","handleClick","length","getJokes","numJokesToGet","axios","get","headers","Accept","res","newJoke","data","joke","has","push","id","uuid","setState","st","setItem","stringify","alert","delta","sort","a","b","src","key","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3762519e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Joke.css';\r\n\r\nexport default class Joke extends Component {\r\n\r\n    getColor() {\r\n        if (this.props.votes >= 15) {\r\n          return \"#4CAF50\";\r\n        } else if (this.props.votes >= 12) {\r\n          return \"#8BC34A\";\r\n        } else if (this.props.votes >= 9) {\r\n          return \"#CDDC39\";\r\n        } else if (this.props.votes >= 6) {\r\n          return \"#FFEB3B\";\r\n        } else if (this.props.votes >= 3) {\r\n          return \"#FFC107\";\r\n        } else if (this.props.votes >= 0) {\r\n          return \"#FF9800\";\r\n        } else {\r\n          return \"#f44336\";\r\n        }\r\n      }\r\n\r\n      getEmoji() {\r\n        if (this.props.votes >= 15) {\r\n          return \"em em-rolling_on_the_floor_laughing\";\r\n        } else if (this.props.votes >= 12) {\r\n          return \"em em-laughing\";\r\n        } else if (this.props.votes >= 9) {\r\n          return \"em em-smiley\";\r\n        } else if (this.props.votes >= 6) {\r\n          return \"em em-slightly_smiling_face\";\r\n        } else if (this.props.votes >= 3) {\r\n          return \"em em-neutral_face\";\r\n        } else if (this.props.votes >= 0) {\r\n          return \"em em-confused\";\r\n        } else {\r\n          return \"em em-angry\";\r\n        }\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Joke\">\r\n                <div className=\"Joke-buttons\">\r\n                    <i onClick={this.props.upvote} className=\"fas fa-arrow-up\" />\r\n                    <span className=\"Joke-votes\" style={{borderColor: this.getColor()}}>{this.props.votes}</span>\r\n                    <i onClick={this.props.downvote} className=\"fas fa-arrow-down\" />\r\n                </div>\r\n                <div className=\"Jokes-text\">\r\n                    {this.props.text}\r\n                </div>\r\n                <div className=\"Joke-smiley\">\r\n                    <i className={this.getEmoji()}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './JokeList.css';\r\nimport Joke from './Joke';\r\nimport uuid from 'uuid/v4';\r\n\r\nexport default class JokeList extends Component {\r\n    static defaultProps = {\r\n        numJokesToGet: 10\r\n    };\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\r\n        loading:false\r\n    }\r\n        this.seenJokes = new Set(this.state.jokes.map(j => j.text));\r\n        console.log(this.seenJokes);\r\n        this.handleVote = this.handleVote.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    async componentDidMount(){\r\n        if(this.state.jokes.length === 0) this.getJokes();\r\n    }\r\n\r\n    async getJokes(){\r\n        try{\r\n            let jokes = [];\r\n        while(jokes.length < this.props.numJokesToGet){\r\n            let res = await axios.get(\"https://icanhazdadjoke.com/\",\r\n            {headers: {Accept : \"application/json\"}});\r\n            let newJoke = res.data.joke;\r\n            if(!this.seenJokes.has(newJoke)){\r\n                jokes.push({id: uuid(),text:newJoke, votes:0});\r\n            }else{\r\n                console.log(\"FOUND A DUPLICATE\");\r\n                console.log(newJoke);\r\n            }\r\n        }\r\n        this.setState(st => ({\r\n            loading:false,\r\n            jokes: [...st.jokes, ...jokes]\r\n        }),\r\n        () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n        ); \r\n        }catch(e){\r\n            alert(e);\r\n            this.setState({loading:false});\r\n        }\r\n        \r\n    }\r\n\r\n    handleVote(id, delta){\r\n        this.setState(st =>({\r\n            jokes: st.jokes.map(j =>{\r\n                return j.id === id ? {...j, votes: j.votes + delta} : j;\r\n            })\r\n        }),\r\n        () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n        );\r\n    }\r\n\r\n    handleClick(){\r\n        this.setState({loading:true}, this.getJokes);\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading){\r\n            return(\r\n                <div className=\"JokeList-spinner\">\r\n                    <i className=\"far fa-8x fa-laugh fa-spin\"></i>\r\n                    <h1 className=\"JokeList-title\">Loading...</h1>\r\n                </div>\r\n            )\r\n        }\r\n        let jokes = this.state.jokes.sort((a,b)=> b.votes - a.votes);\r\n        return (\r\n            <div className=\"JokeList\">\r\n                <div className=\"JokeList-sidebar\">\r\n                <h1 className=\"JokeList-title\">\r\n                    <span>Dad</span> Jokes\r\n                </h1>\r\n                <img src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg'/>\r\n                <button className=\"JokeList-getmore\" onClick={this.handleClick}>\r\n                    Fetch jokes\r\n                </button>\r\n                </div>\r\n                <div className=\"JokeList-jokes\">\r\n                    {jokes.map( j =>(\r\n                        <Joke \r\n                        upvote={()=> this.handleVote(j.id, 1)}\r\n                        downvote={()=> this.handleVote(j.id, -1)} \r\n                        key={j.id}\r\n                        votes={j.votes}\r\n                        text={j.text} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport JokeList from './JokeList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}